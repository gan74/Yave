#version 460

#include "lib/atmosphere.glsl"


// -------------------------------- I/O --------------------------------


layout(local_size_x = 8, local_size_y = 8) in;

layout(rgba32f, set = 0, binding = 0) uniform writeonly image3D out_scattering;

layout(set = 0, binding = 1) uniform CameraData {
    Camera camera;
};

layout(set = 0, binding = 2) uniform AtmosphereData_Inline {
    AtmosphereParams atmos;
};

const float km = 1000.0;

void main() {
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    const ivec3 size = imageSize(out_scattering);
    const vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(size.xy);
    const uint iterations = size.z;

    const vec3 view_dir = -view_direction(camera, uv);
    const vec3 cam_pos = camera.position / km;

    // replace by intersect_ray_sphere
    const vec2 intersection = intersect_sphere(atmos.center, atmos.radius, cam_pos, view_dir);
    const vec2 planet_intersection = intersect_sphere(atmos.center, atmos.planet_radius, cam_pos, view_dir);
    const float near = intersection.x;
    const float far = max(intersection.y, planet_intersection.y);

    vec3 scattering = vec3(0.0);
    float ray_optical_depth = 0.0;

    float last_dist = 0.0;
    for(uint i = 0; i != iterations; ++i) {
        const float dist = lut_dist(atmos, (i + 1.0) / iterations);

        if(dist >= near && last_dist <= far) {
            compute_atmospheric_scattering_iter(
                atmos,
                cam_pos + view_dir * last_dist,
                view_dir,
                dist - last_dist,
                scattering, ray_optical_depth);
        }

        last_dist = dist;

        imageStore(out_scattering, ivec3(coord, i), vec4(scattering, ray_optical_depth));
    }
}

