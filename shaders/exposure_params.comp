#version 460

#include "lib/hdr.glsl"

layout(local_size_x = lum_histogram_size, local_size_y = 1) in;

layout(set = 0, binding = 0) writeonly buffer Exposure {
    ExposureParams params;
};

layout(set = 0, binding = 1) uniform usampler2D in_histogram;

shared uint histogram[lum_histogram_size];
shared uint total;

// https://bruop.github.io/exposure/
void main() {
    const uint index = gl_LocalInvocationIndex;
    uint bin_size = texelFetch(in_histogram, ivec2(index, 0), 0).x;

    if(index == 0) {
        total = 0;
    }

    barrier();

    atomicAdd(total, bin_size);
    histogram[index] = bin_size;

    barrier();

    // Make this not serial
    if(index == 0) {
        for(uint i = 1; i < lum_histogram_size; ++i) {
            histogram[i] += histogram[i - 1];
        }
    }

    barrier();

    const uint total = uint(total * 0.95); // Kill the top 5% of brightest pixels
    const uint less_eq = histogram[index];
    if(less_eq > total) {
        const uint less_than_bin = less_eq - bin_size;
        bin_size = total - min(total, less_than_bin);
    }

    barrier();

    histogram[index] = bin_size * index;

    barrier();

    // Make this not serial
    if(index == 0) {
        for(uint i = lum_histogram_size - 1; i != 0; --i) {
            histogram[i - 1] += histogram[i];
        }
    }

    barrier();

    if(index == 0) {
        const uint weighted = histogram[0];
        const uint black = bin_size;
        const uint non_black = max(total, black + 1) - black;

        const float log_avg = (weighted / (lum_histogram_mul * non_black)) - lum_histogram_offset;
        const float avg = exp2(log_avg);

        const float EV100 = avg_to_EV100(params.avg_lum);

        params.exposure = EV100_to_exposure(EV100);
        params.avg_lum = avg;
        params.max_lum = avg * 9.6;
    }
}

