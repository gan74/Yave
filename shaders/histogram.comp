#version 460

#include "lib/hdr.glsl"

const uint thread_count = 64;
const uint bin_per_thread = lum_histogram_size / thread_count;

layout(local_size_x = thread_count) in;

layout(r32ui, set = 0, binding = 0) uniform uimage2D out_histogram;
layout(set = 0, binding = 1) uniform sampler2D in_color;

shared uint histogram[lum_histogram_size];


uint compute_index(uint i) {
    return gl_LocalInvocationIndex * bin_per_thread + i;
}

// https://bruop.github.io/exposure/
void main() {
    const uvec2 base_coord = uvec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y * thread_count);
    const uvec2 size = textureSize(in_color, 0);

    for(uint i = 0; i != bin_per_thread; ++i) {
        histogram[compute_index(i)] = 0;
    }

    barrier();

    if(base_coord.x < size.x) {
        for(uint i = 0; i != thread_count; ++i) {
            const ivec2 coord = ivec2(base_coord.x, base_coord.y + i);
            if(coord.y < size.y) {
                const float lum = luminance(texelFetch(in_color, coord, 0).rgb);
                const uint bin = lum_to_histogram_bin(lum);
                atomicAdd(histogram[bin], 1);
            }
        }
    }


    barrier();

    for(uint i = 0; i != bin_per_thread; ++i) {
        const uint index = compute_index(i);
        if(histogram[index] != 0) {
            imageAtomicAdd(out_histogram, ivec2(index, 0), histogram[index]);
        }
    }
}

