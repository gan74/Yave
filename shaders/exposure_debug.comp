#version 460

#include "lib/hdr.glsl"

const uint bar_width = 4;
const uint bar_height = 64;
const ivec2 display_offset = ivec2(8, -8);

layout(local_size_x = lum_histogram_size, local_size_y = 1) in;

layout(rgba8, set = 0, binding = 0) uniform image2D out_color;

layout(set = 0, binding = 1) uniform usampler2D in_histogram;
layout(set = 0, binding = 2) uniform Params {
    ExposureParams params;
};


shared uint total;
shared uint max_bin;


void draw_line(float lum, int x_offset, int image_height, vec3 color) {
    const float min_lum = histogram_bin_to_lum(gl_LocalInvocationIndex);
    const float max_lum = histogram_bin_to_lum(gl_LocalInvocationIndex + 1);

    if(lum > min_lum && lum < max_lum) {
        const float t = (lum - min_lum) / (max_lum - min_lum);
        const int x = int(round(t * bar_width));
        for(int y = -4; y != bar_height + 4; ++y) {
            imageStore(out_color, ivec2(x_offset + x, image_height - y) + display_offset, vec4(color, 1.0));
        }
    }
}

void main() {
    const uint bin_size = texelFetch(in_histogram, ivec2(gl_LocalInvocationIndex, 0), 0).x;

    if(gl_LocalInvocationIndex == 0) {
        total = 0;
        max_bin = 0;
    }

    barrier();

    atomicAdd(total, bin_size);
    atomicMax(max_bin, bin_size);

    barrier();

    const int bar = int(max(1, (bin_size * bar_height) / max_bin));
    const int x_offset = int(gl_LocalInvocationIndex * (bar_width + 1));
    const int image_height = int(imageSize(out_color).y);

    for(int x = 0; x != bar_width; ++x) {
        for(int y = 0; y != bar; ++y) {
            const vec4 color = vec4(bin_size > 0 ? 1.0 : 0.25);
            imageStore(out_color, ivec2(x_offset + x, image_height - y) + display_offset, color);
        }
    }

    draw_line(params.avg_lum, x_offset, image_height, vec3(0.0, 1.0, 0.0));
    draw_line(params.max_lum, x_offset, image_height, vec3(1.0, 0.0, 0.0));
}

