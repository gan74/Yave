#version 460

#include "lib/ibl.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform samplerCube in_envmap;
layout(rgba8, set = 0, binding = 1) uniform writeonly imageCube out_image;

layout(set = 0, binding = 2) uniform Roughness_Inline {
    float roughness;
};


vec3 debug_cube(uint side) {
    if(side == 0) return vec3(1.0, 0.5, 0.5); // front
    if(side == 1) return vec3(0.0, 0.5, 0.5); // back

    if(side == 2) return vec3(0.5, 1.0, 0.5); // right
    if(side == 3) return vec3(0.5, 0.0, 0.5); // left

    if(side == 4) return vec3(0.5, 0.5, 1.0); // top
    if(side == 5) return vec3(0.5, 0.5, 0.0); // bottom
}

void main() {
    const vec2 coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(out_image).xy);

    for(uint i = 0; i != 6; ++i) {
        const vec3 local_dir = normalize(cube_dir(uv, i));

        vec3 conv;
        if(roughness <= 0.0) {
            conv = texture(in_envmap, local_dir).rgb;
        } else if(roughness >= 1.0) {
            conv = diffuse_convolution(in_envmap, local_dir);
        } else {
            conv = specular_convolution(in_envmap, local_dir, roughness);
        }

        imageStore(out_image, ivec3(coord, i), vec4(conv, 0.0));
    }
}

