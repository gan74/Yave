cmake_minimum_required(VERSION 3.24)
project(yave)


function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)
    message("Using unity build for target ${UB_SUFFIX}")
    set(FILES ${${SOURCE_VARIABLE_NAME}})

    # Exclude all translation units from compilation
    set_source_files_properties(${FILES} PROPERTIES HEADER_FILE_ONLY true)

    # Generate a unique filename for the unity build translation unit
    set(UNIT_BUILD_FILE ${CMAKE_CURRENT_BINARY_DIR}/blob_${UB_SUFFIX}.cpp)
    file(WRITE ${UNIT_BUILD_FILE} "// Unity Build generated by CMake\n")
    file(WRITE ${UNIT_BUILD_FILE} "#define YAVE_UNITY_BUILD\n")

    # Add include statement for each translation unit
    foreach(SOURCE_FILE ${FILES})
        get_filename_component(FILE_EXT "${SOURCE_FILE}" EXT)
        if(NOT "${FILE_EXT}" MATCHES "\.h(pp)?")
            file(APPEND ${UNIT_BUILD_FILE} "#include <${SOURCE_FILE}>\n")
        endif()
    endforeach(SOURCE_FILE)

    # Complement list of translation units with the name of ub
    set(${SOURCE_VARIABLE_NAME} ${${SOURCE_VARIABLE_NAME}} ${UNIT_BUILD_FILE} PARENT_SCOPE)
endfunction(enable_unity_build)

function(add_shader_variation SHADER_TARGET SHADER_FILE SHADER_DEFINES)
    foreach(DEF ${SHADER_DEFINES})
        set(COMPILE_ARGS ${COMPILE_ARGS} -D${DEF})
        set(NAME_SUFFIX "${NAME_SUFFIX}_${DEF}")
    endforeach()
    get_filename_component(SHADER_NAME ${SHADER_FILE} NAME_WE)
    get_filename_component(SHADER_EXT ${SHADER_FILE} EXT)
    set(SHADER_BIN "${CMAKE_CURRENT_BINARY_DIR}/${SHADER_NAME}${NAME_SUFFIX}${SHADER_EXT}.spv")
    add_custom_command(
        TARGET ${SHADER_TARGET}
        COMMAND ${Vulkan_GLSLC_EXECUTABLE} -c --target-env=vulkan1.2 ${COMPILE_ARGS} "${CMAKE_SOURCE_DIR}/shaders/${SHADER_FILE}" -o ${SHADER_BIN}
    )
    # add_custom_command(TARGET ${SHADER_TARGET} POST_BUILD COMMAND echo optimizing ${SHADER_BIN})
    add_custom_command(TARGET ${SHADER_TARGET} POST_BUILD COMMAND spirv-opt ${SHADER_BIN} -O --preserve-bindings -o ${SHADER_BIN})
endfunction(add_shader_variation)




option(YAVE_BUILD_YAVE "Build yave" ON)
option(YAVE_BUILD_EDITOR "Build editor" ON)
option(YAVE_TRACY_PROFILING "Use Tracy profiling" ON)
option(YAVE_UNITY_BUILD "Force unity build" OFF)


set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CXX_STANDARD 20)

# See note in y
# set(CMAKE_CXX_EXTENSIONS OFF)



find_package(Vulkan REQUIRED)

if(NOT Vulkan_FOUND)
    message(FATAL_ERROR "Vulkan SDK not found")
endif()
if(NOT Vulkan_glslc_FOUND)
    message(FATAL_ERROR "glslc not found in Vulkan SDK")
endif()


# add y subtree
add_subdirectory(y)


# setup includes
include_directories(${y_SOURCE_DIR})
include_directories(${yave_SOURCE_DIR})
include_directories(${Vulkan_INCLUDE_DIRS})


# Yave's core file
file(GLOB_RECURSE YAVE_FILES
    "yave/*.h"
    "yave/*.cpp"
)


file(GLOB_RECURSE WREN_FILES
    "external/wren/src/*.h"
    "external/wren/src/*.c"
)

set(TRACY_FILES
    "external/tracy/public/TracyClient.cpp"
)

# Editor files
file(GLOB_RECURSE EDITOR_FILES
    "editor/*.cpp"
    "editor/*.h"
)

file(GLOB_RECURSE EDITOR_EXTERNAL_FILES
    "external/imgui/*.cpp"
    "external/imgui/*.h"

    "external/imgui_test_engine/*.cpp"
    "external/imgui_test_engine/*.h"

    "external/tinygltf/*.hpp"
    "external/tinygltf/*.h"
)

# Shader files they are here so the IDE can find them
file(GLOB_RECURSE SHADER_FILES
    "shaders/*.frag"
    "shaders/*.vert"
    "shaders/*.geom"
    "shaders/*.comp"
    "shaders/*.glsl"
)


function(build_engine_shaders SHADER_TARGET)
    add_shader_variation(${SHADER_TARGET} "basic.vert" "")
    add_shader_variation(${SHADER_TARGET} "screen.vert" "")
    add_shader_variation(${SHADER_TARGET} "wireframe.vert" "")

    add_shader_variation(${SHADER_TARGET} "id.frag" "")
    add_shader_variation(${SHADER_TARGET} "tonemap.frag" "")
    add_shader_variation(${SHADER_TARGET} "taa_resolve.frag" "")
    add_shader_variation(${SHADER_TARGET} "passthrough.frag" "")
    add_shader_variation(${SHADER_TARGET} "atmosphere.frag" "")
    add_shader_variation(${SHADER_TARGET} "downsample.frag" "")
    add_shader_variation(${SHADER_TARGET} "bloom_upscale.frag" "")
    add_shader_variation(${SHADER_TARGET} "bloom_downscale.frag" "")
    add_shader_variation(${SHADER_TARGET} "deferred_ambient.frag" "")
    add_shader_variation(${SHADER_TARGET} "wireframe.frag" "")

    add_shader_variation(${SHADER_TARGET} "copy.comp" "")
    add_shader_variation(${SHADER_TARGET} "ssao.comp" "")
    add_shader_variation(${SHADER_TARGET} "histogram.comp" "")
    add_shader_variation(${SHADER_TARGET} "prev_camera.comp" "")
    add_shader_variation(${SHADER_TARGET} "depth_bounds.comp" "")
    add_shader_variation(${SHADER_TARGET} "update_transforms.comp" "")
    add_shader_variation(${SHADER_TARGET} "linearize_depth.comp" "")
    add_shader_variation(${SHADER_TARGET} "exposure_params.comp" "")
    add_shader_variation(${SHADER_TARGET} "exposure_debug.comp" "")
    add_shader_variation(${SHADER_TARGET} "equirec_convolution.comp" "")
    add_shader_variation(${SHADER_TARGET} "cubemap_convolution.comp" "")
    add_shader_variation(${SHADER_TARGET} "atmosphere_integrator.comp" "")
    add_shader_variation(${SHADER_TARGET} "brdf_integrator.comp" "")

    add_shader_variation(${SHADER_TARGET} "deferred_locals.comp" "")
    add_shader_variation(${SHADER_TARGET} "deferred_locals.comp" "DEBUG")
    add_shader_variation(${SHADER_TARGET} "deferred_light.frag" "POINT")
    add_shader_variation(${SHADER_TARGET} "deferred_light.frag" "SPOT")
    add_shader_variation(${SHADER_TARGET} "deferred_light.vert" "POINT")
    add_shader_variation(${SHADER_TARGET} "deferred_light.vert" "SPOT")

    add_shader_variation(${SHADER_TARGET} "blur.frag" "HORIZONTAL")
    add_shader_variation(${SHADER_TARGET} "blur.frag" "VERTICAL")

    add_shader_variation(${SHADER_TARGET} "textured.frag" "")
    add_shader_variation(${SHADER_TARGET} "textured.frag" "ALPHA_TEST")
    add_shader_variation(${SHADER_TARGET} "textured.frag" "SPECULAR")
    add_shader_variation(${SHADER_TARGET} "textured.frag" "SPECULAR;ALPHA_TEST")

    add_shader_variation(${SHADER_TARGET} "ssao_upsample.comp" "")
    add_shader_variation(${SHADER_TARGET} "ssao_upsample.comp" "COMBINE_HIGH")
endfunction(build_engine_shaders)

function(build_editor_shaders SHADER_TARGET)
    add_shader_variation(${SHADER_TARGET} "editor/engine_view.frag" "")
    add_shader_variation(${SHADER_TARGET} "editor/imgui.frag" "")
    add_shader_variation(${SHADER_TARGET} "editor/imgui_billboard.frag" "")
    add_shader_variation(${SHADER_TARGET} "editor/selection.frag" "")

    add_shader_variation(${SHADER_TARGET} "editor/imgui_billboard.geom" "")

    add_shader_variation(${SHADER_TARGET} "editor/imgui.vert" "")
    add_shader_variation(${SHADER_TARGET} "editor/imgui_billboard.vert" "")

    add_shader_variation(${SHADER_TARGET} "editor/picking.comp" "")
    add_shader_variation(${SHADER_TARGET} "editor/depth_alpha.comp" "")
endfunction(build_editor_shaders)



if(YAVE_UNITY_BUILD)
    enable_unity_build(yave YAVE_FILES)
endif()

if(YAVE_BUILD_YAVE)
    add_subdirectory(external/spirv_cross)

    add_library(yave STATIC ${YAVE_FILES} ${SHADER_FILES} ${SHADER_LIBS})

    if(UNIX)
        target_link_libraries(yave xcb)
    endif()

    if(YAVE_TRACY_PROFILING)
        add_library(tracy STATIC ${TRACY_FILES})
        if(WIN32)
            target_link_libraries(tracy ws2_32 dbghelp advapi32 user32)
        endif()
        target_compile_options(tracy PUBLIC "-DTRACY_ENABLE")
        target_link_libraries(yave tracy)
    endif()

    target_link_libraries(yave y spirv-cross-core)

    if(NOT MSVC)
        target_link_libraries(yave stdc++fs)
    endif()

    add_library(wren STATIC ${WREN_FILES})
    target_include_directories(wren PRIVATE external/wren/src/include)
    target_include_directories(wren PRIVATE external/wren/src/optional)
    target_include_directories(wren PRIVATE external/wren/src/vm)


    add_custom_target(shaders)
    build_engine_shaders(shaders)

    add_dependencies(yave shaders)
endif()

if(YAVE_BUILD_EDITOR)
    add_executable(editor ${EDITOR_FILES} ${EDITOR_EXTERNAL_FILES})
    target_include_directories(editor PRIVATE external/imgui)

    target_link_libraries(editor wren)

    add_custom_target(editor_shaders)
    build_editor_shaders(editor_shaders)
    add_dependencies(editor editor_shaders)

    target_link_libraries(editor yave)
endif()

